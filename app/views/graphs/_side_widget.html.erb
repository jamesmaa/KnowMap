<% ([@graph]+@graph.all_subgraphs).each { |g| %>
  <p>
    <svg class="group-button" id="<%=g.id%>" data-nodes="<%= g.all_nodes.map { |n| n.id } %>"><rect height=10 width=10 style="fill:#fff"></rect></svg> <%= g.name %>
  </p>
<% } %>

<script type="text/javascript" src="http://d3js.org/d3.v2.js"></script>
<script>
  var btnDefaultColor = d3.select(".group-button").select("rect").style("fill");
  var usedColor = [];
  var unUsedColor = ["#ff0000","#3914af","#ffd300","#00cc00"];
  var nodeColors = {};

  d3.selectAll(".group-button").on("click",groupClick);

  function groupClick() {
    var btn = d3.select(this);
    var btnRect = btn.select("rect");

    var ids = $.parseJSON(btn.attr("data-nodes"));

    var nodesToColor = d3.select("#chart-group").selectAll(".node")
      .filter(function(d) { return ids.indexOf(d.id) > -1 } );

    if ((btnRect.style("fill") == btnDefaultColor) && (unUsedColor.length > 0)) {
      var color = unUsedColor.shift();

      btnRect.style("fill",color);
      color = btnRect.style("fill");
      usedColor.push(color);

      nodesToColor.each(function(d) {
        if (nodeColors[d.id] == undefined)
          nodeColors[d.id] = [];

        nodeColors[d.id].push(color);

        addCircleParts(d3.select(this).select("#g-group"),
          nodeColors[d.id],d.x,d.y);
      });
    } else if (btnRect.style("fill") != btnDefaultColor) {
      var color = btnRect.style("fill");
      unUsedColor.push(color);
      usedColor.splice(usedColor.indexOf(color),1);

      btnRect.style("fill",btnDefaultColor);
      nodesToColor.each(function(d) {
        var aryColors = nodeColors[d.id];
        nodeColors[d.id] = [];

        for (c in aryColors) {
          if (aryColors[c] != color)
            nodeColors[d.id].push(aryColors[c]);
        }

        addCircleParts(d3.select(this).select("#g-group"),
          nodeColors[d.id],d.x,d.y);
      });
    }
  }

  function addCircleParts(svgG,colors,x,y) {
    x = parseFloat(x);
    y = parseFloat(y);

    var colorR = 15;
    var rotateRadian = Math.PI/2;
  
    svgG.selectAll("path.cParts").remove();
    svgG.selectAll("circle.cParts").remove();
  
    if (colors.length == 1) { // If one color just want a circle
      svgG.selectAll("circle.cParts").data(colors).enter().append("circle")
        .attr("class","cParts")
        .attr("fill",function(d){return d;})
        .style("opacity",0.5)
        .attr("r",colorR)
        .attr("cx",x)
       .attr("cy",y);
    } else {
      svgG.selectAll("path.cParts").data(colors).enter().append("path")
       .attr("class","cParts")
       .attr("fill",function(d){return d;})
       .style("opacity",0.5)
       .attr("d",function(d){
         var outStr = "M"+x+","+y+" "; //Center

         var i = colors.indexOf(d);
         var len = colors.length;
  
         var x1 = x + colorR*Math.cos(Math.PI*2*((i/len)-0.001) - rotateRadian);
         var y1 = y + colorR*Math.sin(Math.PI*2*((i/len)-0.001) - rotateRadian);
  
         outStr += "L"+x1+","+y1+" ";
  
         var x2 = x + colorR*Math.cos(Math.PI*2*((i+1)/len) - rotateRadian);
         var y2 = y + colorR*Math.sin(Math.PI*2*((i+1)/len) - rotateRadian);
  
         outStr += "A"+colorR+","+colorR+" 0 0,1 ";
         outStr += x2+","+y2+" ";
  
         outStr += "L"+x+","+y+" ";

         return outStr;
       });
    }
  }
</script>
