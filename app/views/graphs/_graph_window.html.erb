<div id="window">
  <div id="chart" style="height:100%; width:100%;"></div>
  <div class="clear"></div>
</div>

<script type="text/javascript">


  var transMatrix = [1,0,0,1,0,0];

  window.addEventListener('keydown', keyDown, false);
  window.addEventListener('mousemove', winMouseMove, false);
  window.addEventListener('mouseup', winMouseUp, false);

  var winPos = [0,0];
  var svgPos = [0,0];
  var bMouseDown = false;
  var dragOldPos = [0,0];
  
  var svg;
  var svgChartGroup;

function doMapStuff() {
  if(svg)
    svg.remove();
  
  var url = "../data.json?id=";
  node_ids = $("#graphData").attr("data-all_graph_nodes");
  node_ids = node_ids.substr(1, node_ids.length-2);
  if(node_ids) { url = url + node_ids; }
  
  svg = d3.select("#chart").append("svg")
      .attr("width", "100%")
      .attr("height", "100%")
      .on("mousewheel", svgMouseWheel)
      .on("mousedown", svgMouseDown)
      .on("mousemove", svgMouseMove);

  svgChartGroup = svg.append("g")
      .attr("id", "chart-group")
      .attr("transform","matrix("+transMatrix.join(' ')+")");

  <!-- Add zoom/pan widget -->
  var svgZoomPan = svg.append("g");
  svgZoomPan.append("circle")
    .attr("cx",50)
    .attr("cy",50)
    .attr("r",42)
    .style("fill","white")
    .style("opacity",0.75);
  svgZoomPan.append("path")
    .attr("d", "M50 10 l12 20 a40,70 0 0,0 -24,0z")
    .attr("class","zoom-pan-button")
    .on("click",panUp);
  svgZoomPan.append("path")
    .attr("d", "M10 50 l20 -12 a70,40 0 0,0 0,24z")
    .attr("class","zoom-pan-button")
    .on("click",panRight);
  svgZoomPan.append("path")
    .attr("d", "M50 90 l12 -20 a40,70 0 0,1 -24,0z")
    .attr("class","zoom-pan-button")
    .on("click",panDown);
  svgZoomPan.append("path")
    .attr("d", "M90 50 l-20 -12 a70,40 0 0,1 0,24z")
    .attr("class","zoom-pan-button")
    .on("click",panLeft);
  svgZoomPan.append("circle")
    .attr("class", "zoom-pan-compass")
    .attr("cx",50)
    .attr("cy",50)
    .attr("r",20);
  svgZoomPan.append("circle")
    .attr("class", "zoom-pan-button")
    .attr("cx",50)
    .attr("cy",41)
    .attr("r",8)
    .on("click",zoomOut);
  svgZoomPan.append("circle")
    .attr("class", "zoom-pan-button")
    .attr("cx",50)
    .attr("cy",59)
    .attr("r",8)
    .on("click",zoomIn);
  svgZoomPan.append("rect")
    .attr("class", "zoom-pan-plus-minus")
    .attr("x",46)
    .attr("y",39.5)
    .attr("width",8)
    .attr("height",3);
  svgZoomPan.append("rect")
    .attr("class", "zoom-pan-plus-minus")
    .attr("x",46)
    .attr("y",57.5)
    .attr("width",8)
    .attr("height",3);
  svgZoomPan.append("rect")
    .attr("class", "zoom-pan-plus-minus")
    .attr("x",48.5)
    .attr("y",55)
    .attr("width",3)
    .attr("height",8);

  d3.json(url, function(json) {
    var edgeStyles = {
      "RelatedEdge":MAP_CONSTANTS.edge_style_related,
      "DependentEdge":MAP_CONSTANTS.edge_style_dependent,
    };
    var edgeMarkerEnd = {"RelatedEdge":"none", "DependentEdge":"url(#arrowhead)"};
    var nodes = json.nodes;
    var links = json.lines;

    var nodeMap = {}
    for (n in nodes)
    {
      /*
        Shifting nodes as needed. This turns the string to a float, hopefully
        the type change won't hurt anything.
      */
      nodes[n].x = parseFloat(nodes[n].x) + MAP_CONSTANTS.node_shift_x;
      nodes[n].y = parseFloat(nodes[n].y) + MAP_CONSTANTS.node_shift_y;

      if (nodes[n].title.length > MAP_CONSTANTS.node_text_line_char_limit) {
        var aryStr = nodes[n].title.split(' ');
        var aryLabel = [aryStr.shift()];
        var iLabel = 0;
        var currLineLen = aryLabel[iLabel].length;
        for (i in aryStr) {
          if ((currLineLen+aryStr[i].length+1) >
              MAP_CONSTANTS.node_text_line_char_limit) {
            iLabel++;
            aryLabel[iLabel] = ""
            currLineLen = 0;
          } else {
            aryLabel[iLabel] += " ";
            currLineLen++;
          }
          aryLabel[iLabel] += aryStr[i];
          currLineLen += aryStr[i].length;
        }
        
        nodes[n].aryLabel = aryLabel;
      } else {
        nodes[n].aryLabel = [nodes[n].title];
      }

      nodeMap[nodes[n].id] = nodes[n];
    }

    <!-- Arrowhead end -->  
    svgChartGroup.append("defs").append("marker")
      .attr("id", "arrowhead")
      .attr("viewBox", "0 0 10 10")
      .attr("refX", MAP_CONSTANTS.node_radius*4.35)
      .attr("refY", "5")
      .attr("markerUnits", "strokeWidth")
      .attr("markerWidth", 6)
      .attr("markerHeight", 4)
      .attr("orient", "auto")
      .append("path")
        .attr("d", "M 0 0 L 10 5 L 0 10 Z");

    <!-- Insert Edges -->  
    var link = svgChartGroup.selectAll("link.link")
      .data(links)
      .enter().append("line")
        .attr("class","map-edge")
        .attr("x1", function(d){return nodeMap[d.source].x;})
        .attr("y1", function(d){return nodeMap[d.source].y;})
        .attr("y2", function(d){return nodeMap[d.target].y;})
        .attr("x2", function(d){return nodeMap[d.target].x;})
        .style("stroke-dasharray", function(d){return edgeStyles[d.type]})
        .style("marker-end", function(d){return edgeMarkerEnd[d.type]});

    <!-- Insert Nodes -->
    var node = svgChartGroup.selectAll("g.node")
      .data(nodes)
      .enter().append("g")
        .attr("class", "node")
        .attr("id", function(d){return d.id;})
        .attr("transform",function(d){return "translate("+d.x+","+d.y+")";});

    node.on("dblclick", onDblClick);

    node.append("g")
      .attr("id","g-group");

    nodeGNode = node.append("g")
      .attr("id","g-node")

    nodeGNode.append("circle")
     .attr("class", "map-node")
     .attr("r", MAP_CONSTANTS.node_radius);

    nodeGNode.append("g")
      .attr("id","g-node-label")
      .each(function(d) {
        var g = d3.select(this);
        var startDY = 0.5 - (d.aryLabel.length/2.0);
        startDY += MAP_CONSTANTS.node_text_dy;
        for(i in d.aryLabel) {
          g.append("text").text(d.aryLabel[i])
            .attr("class","map-node-text")
            .attr("dy",(startDY+parseInt(i))+"em");
        }
      });

    nodeGNode.append("title")
      .attr("data-id", function(d){return d.id;})
        .text(function(d){return d.title;});

  });
}

  function onDblClick() {
    <!-- Code to change to the clicked on node's content information. -->
    var title = d3.select(this).select("title").text();
    var id = parseInt($('title:contains('+title+')')[0].getAttribute('data-id'));
    var url = '/nodes/' + id;
    updateView(url);
    Map.NodeWidget.show();
    Map.LearningPathWidget.expand();
    
    history.pushState({'node_id': id, search:search_term()}, document.title, url); // save history
  }

  function svgMouseMove() {
    svgPos = d3.mouse(this);
  }

  function svgMouseDown() {
    bMouseDown = true;
    dragOldPos = winPos;
    svg.style("cursor", "move");
    d3.event.preventDefault();
  }

  function winMouseUp(e) {
    bMouseDown = false;
    svg.style("cursor", "auto");
  }

  function winMouseMove(e) {
    winPos = [e.clientX,e.clientY];
    if (bMouseDown) {
      var dx = -1*(dragOldPos[0]-winPos[0]);
      var dy = -1*(dragOldPos[1]-winPos[1]);
      pan(dx,dy);
      dragOldPos = winPos;
    }
  }

  function svgMouseWheel() {
    if (d3.event.wheelDelta > 0)
      zoomIn();
    else
      zoomOut();
    d3.event.preventDefault();
  }
  function zoomIn() { zoom(MAP_CONSTANTS.zoom_scale); }
  function zoomOut() { zoom(1.0/MAP_CONSTANTS.zoom_scale); }

  function zoom(scale) {
    if (svgChartGroup == null)
      return;

    for(var i = 0; i < transMatrix.length; i++) {
      transMatrix[i] *= scale;
    }

    transMatrix[4] += (1-scale)*svgPos[0];
    transMatrix[5] += (1-scale)*svgPos[1];

    var matrix = "matrix("+transMatrix.join(' ')+")";
    svgChartGroup.attr("transform", matrix);
  }

  function keyDown(event) {
    switch(event.keyCode) {
      case 37: // left arrow
        panRight();
        break;
      case 38: // up arrow
        panUp();
        break;
      case 39: // right arrow
        panLeft();
        break;
      case 40: // down arrow
        panDown();
        break;
      default:
        break; // Do nothing
    }
  }

  function panUp(){ pan(0,MAP_CONSTANTS.pan_step); }
  function panDown(){ pan(0,-MAP_CONSTANTS.pan_step); }
  function panRight(){ pan(MAP_CONSTANTS.pan_step,0); }
  function panLeft(){ pan(-MAP_CONSTANTS.pan_step,0); }

  function pan(dx,dy) {
    if (svgChartGroup == null)
      return;

    transMatrix[4] += dx;
    transMatrix[5] += dy;

    var matrix = "matrix("+transMatrix.join(' ')+")";
    svgChartGroup.attr("transform", matrix);
  }
</script>
